//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.SOAPService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SOAPService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MVC.SOAPService.CompositeType GetDataUsingDataContract(MVC.SOAPService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MVC.SOAPService.CompositeType> GetDataUsingDataContractAsync(MVC.SOAPService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUniversities", ReplyAction="http://tempuri.org/IService1/GetUniversitiesResponse")]
        AppService.DTOs.UniversityDTO[] GetUniversities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUniversities", ReplyAction="http://tempuri.org/IService1/GetUniversitiesResponse")]
        System.Threading.Tasks.Task<AppService.DTOs.UniversityDTO[]> GetUniversitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostUniversity", ReplyAction="http://tempuri.org/IService1/PostUniversityResponse")]
        string PostUniversity(AppService.DTOs.UniversityDTO universityDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostUniversity", ReplyAction="http://tempuri.org/IService1/PostUniversityResponse")]
        System.Threading.Tasks.Task<string> PostUniversityAsync(AppService.DTOs.UniversityDTO universityDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUniversityById", ReplyAction="http://tempuri.org/IService1/GetUniversityByIdResponse")]
        AppService.DTOs.UniversityDTO GetUniversityById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUniversityById", ReplyAction="http://tempuri.org/IService1/GetUniversityByIdResponse")]
        System.Threading.Tasks.Task<AppService.DTOs.UniversityDTO> GetUniversityByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutUniversity", ReplyAction="http://tempuri.org/IService1/PutUniversityResponse")]
        string PutUniversity(AppService.DTOs.UniversityDTO universityDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutUniversity", ReplyAction="http://tempuri.org/IService1/PutUniversityResponse")]
        System.Threading.Tasks.Task<string> PutUniversityAsync(AppService.DTOs.UniversityDTO universityDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUniversity", ReplyAction="http://tempuri.org/IService1/DeleteUniversityResponse")]
        string DeleteUniversity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUniversity", ReplyAction="http://tempuri.org/IService1/DeleteUniversityResponse")]
        System.Threading.Tasks.Task<string> DeleteUniversityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudents", ReplyAction="http://tempuri.org/IService1/GetStudentsResponse")]
        AppService.DTOs.StudentDTO[] GetStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudents", ReplyAction="http://tempuri.org/IService1/GetStudentsResponse")]
        System.Threading.Tasks.Task<AppService.DTOs.StudentDTO[]> GetStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostStudent", ReplyAction="http://tempuri.org/IService1/PostStudentResponse")]
        string PostStudent(AppService.DTOs.StudentDTO studentDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostStudent", ReplyAction="http://tempuri.org/IService1/PostStudentResponse")]
        System.Threading.Tasks.Task<string> PostStudentAsync(AppService.DTOs.StudentDTO studentDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentById", ReplyAction="http://tempuri.org/IService1/GetStudentByIdResponse")]
        AppService.DTOs.StudentDTO GetStudentById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentById", ReplyAction="http://tempuri.org/IService1/GetStudentByIdResponse")]
        System.Threading.Tasks.Task<AppService.DTOs.StudentDTO> GetStudentByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        string DeleteStudent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        System.Threading.Tasks.Task<string> DeleteStudentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeachers", ReplyAction="http://tempuri.org/IService1/GetTeachersResponse")]
        AppService.DTOs.TeacherDTO[] GetTeachers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeachers", ReplyAction="http://tempuri.org/IService1/GetTeachersResponse")]
        System.Threading.Tasks.Task<AppService.DTOs.TeacherDTO[]> GetTeachersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostTeacher", ReplyAction="http://tempuri.org/IService1/PostTeacherResponse")]
        string PostTeacher(AppService.DTOs.TeacherDTO teacherDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostTeacher", ReplyAction="http://tempuri.org/IService1/PostTeacherResponse")]
        System.Threading.Tasks.Task<string> PostTeacherAsync(AppService.DTOs.TeacherDTO teacherDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherById", ReplyAction="http://tempuri.org/IService1/GetTeacherByIdResponse")]
        AppService.DTOs.TeacherDTO GetTeacherById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherById", ReplyAction="http://tempuri.org/IService1/GetTeacherByIdResponse")]
        System.Threading.Tasks.Task<AppService.DTOs.TeacherDTO> GetTeacherByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTeacher", ReplyAction="http://tempuri.org/IService1/DeleteTeacherResponse")]
        string DeleteTeacher(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTeacher", ReplyAction="http://tempuri.org/IService1/DeleteTeacherResponse")]
        System.Threading.Tasks.Task<string> DeleteTeacherAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVC.SOAPService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVC.SOAPService.IService1>, MVC.SOAPService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MVC.SOAPService.CompositeType GetDataUsingDataContract(MVC.SOAPService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MVC.SOAPService.CompositeType> GetDataUsingDataContractAsync(MVC.SOAPService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public AppService.DTOs.UniversityDTO[] GetUniversities() {
            return base.Channel.GetUniversities();
        }
        
        public System.Threading.Tasks.Task<AppService.DTOs.UniversityDTO[]> GetUniversitiesAsync() {
            return base.Channel.GetUniversitiesAsync();
        }
        
        public string PostUniversity(AppService.DTOs.UniversityDTO universityDTO) {
            return base.Channel.PostUniversity(universityDTO);
        }
        
        public System.Threading.Tasks.Task<string> PostUniversityAsync(AppService.DTOs.UniversityDTO universityDTO) {
            return base.Channel.PostUniversityAsync(universityDTO);
        }
        
        public AppService.DTOs.UniversityDTO GetUniversityById(int id) {
            return base.Channel.GetUniversityById(id);
        }
        
        public System.Threading.Tasks.Task<AppService.DTOs.UniversityDTO> GetUniversityByIdAsync(int id) {
            return base.Channel.GetUniversityByIdAsync(id);
        }
        
        public string PutUniversity(AppService.DTOs.UniversityDTO universityDTO) {
            return base.Channel.PutUniversity(universityDTO);
        }
        
        public System.Threading.Tasks.Task<string> PutUniversityAsync(AppService.DTOs.UniversityDTO universityDTO) {
            return base.Channel.PutUniversityAsync(universityDTO);
        }
        
        public string DeleteUniversity(int id) {
            return base.Channel.DeleteUniversity(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUniversityAsync(int id) {
            return base.Channel.DeleteUniversityAsync(id);
        }
        
        public AppService.DTOs.StudentDTO[] GetStudents() {
            return base.Channel.GetStudents();
        }
        
        public System.Threading.Tasks.Task<AppService.DTOs.StudentDTO[]> GetStudentsAsync() {
            return base.Channel.GetStudentsAsync();
        }
        
        public string PostStudent(AppService.DTOs.StudentDTO studentDTO) {
            return base.Channel.PostStudent(studentDTO);
        }
        
        public System.Threading.Tasks.Task<string> PostStudentAsync(AppService.DTOs.StudentDTO studentDTO) {
            return base.Channel.PostStudentAsync(studentDTO);
        }
        
        public AppService.DTOs.StudentDTO GetStudentById(int id) {
            return base.Channel.GetStudentById(id);
        }
        
        public System.Threading.Tasks.Task<AppService.DTOs.StudentDTO> GetStudentByIdAsync(int id) {
            return base.Channel.GetStudentByIdAsync(id);
        }
        
        public string DeleteStudent(int id) {
            return base.Channel.DeleteStudent(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteStudentAsync(int id) {
            return base.Channel.DeleteStudentAsync(id);
        }
        
        public AppService.DTOs.TeacherDTO[] GetTeachers() {
            return base.Channel.GetTeachers();
        }
        
        public System.Threading.Tasks.Task<AppService.DTOs.TeacherDTO[]> GetTeachersAsync() {
            return base.Channel.GetTeachersAsync();
        }
        
        public string PostTeacher(AppService.DTOs.TeacherDTO teacherDTO) {
            return base.Channel.PostTeacher(teacherDTO);
        }
        
        public System.Threading.Tasks.Task<string> PostTeacherAsync(AppService.DTOs.TeacherDTO teacherDTO) {
            return base.Channel.PostTeacherAsync(teacherDTO);
        }
        
        public AppService.DTOs.TeacherDTO GetTeacherById(int id) {
            return base.Channel.GetTeacherById(id);
        }
        
        public System.Threading.Tasks.Task<AppService.DTOs.TeacherDTO> GetTeacherByIdAsync(int id) {
            return base.Channel.GetTeacherByIdAsync(id);
        }
        
        public string DeleteTeacher(int id) {
            return base.Channel.DeleteTeacher(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTeacherAsync(int id) {
            return base.Channel.DeleteTeacherAsync(id);
        }
    }
}
